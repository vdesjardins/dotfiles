#!/bin/bash

alias ead="$EDITOR ~/dotfiles/shells/dockerfunc; source ~/dotfiles/shells/dockerfunc"

export docker_root_mount_path=${docker_root_mount_path:-${HOME}/projects}

alias d="docker"
alias dr="docker run -it --rm"

function dgcloud() {
        local cfgname=$(refresh-docker-kubeconfig /usr/bin/gcloud)
        trap "rm ${cfgname}" EXIT

        case $1 in
        bq | gsutil | gcloud | kubectl)
                local cmd=$1
                shift
                ;;
        *)
                cmd=gcloud
                ;;
        esac

        docker run --rm -it \
                -v "${HOME}/.config/gcloud:/.config/gcloud" \
                -v "${HOME}/.ssh:/root/.ssh:ro" \
                -v "$(which docker):/usr/bin/docker" \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v "${cfgname}:/.kube/config" \
                -v "${HOME}/.config/docker-kube:/.kube" \
                -v "${HOME}/.docker:/.docker" \
                -v "${docker_root_mount_path}/:${docker_root_mount_path}/" \
                -w $(pwd) \
                --user ${UID} \
                ${docker_base_repo_url}/cloud-sdk:latest ${cmd} "$@"
}
complete -o nospace -o default -F _dgcloud_complete "dgcloud"

function dbq() {
        dgcloud bq "$@"
}
compdef dbq=bq

function dgsutil() {
        dgcloud gsutil "$@"
}
complete -o nospace -o default -F _dgsutil_complete "dgsutil"

function dkubectl() {
        dgcloud kubectl "$@"
}
compdef dkubectl=kubectl

function dhelm() {
        local docker_base_repo_url=${DOCKER_REGISTRY_PATH:-local}
        local cfgname=$(refresh-docker-kubeconfig)
        trap "rm ${cfgname}" EXIT

        docker run --rm -it \
                -v "${HOME}/.config/gcloud:/builder/home/.config/gcloud" \
                -v "${cfgname}:/builder/home/.kube/config" \
                -v "$HOME/.docker-data/helm/config:/builder/home/.config/helm" \
                -v "$HOME/.docker-data/helm/cache/repository:/builder/home/.cache/helm/repository" \
                -v "${docker_root_mount_path}/:${docker_root_mount_path}/" \
                -e HELM_REPO_UPDATE=no \
                -e HELM_REPO_DEFAULT_INIT=yes \
                -e HOME=/builder/home \
                --user ${UID} \
                -w $(pwd) \
                ${docker_base_repo_url}/helm "$@"
}
compdef dhelm=helm

function dterraform() {
        local docker_base_repo_url=${DOCKER_REGISTRY_PATH:-local}
        local cfgname=$(refresh-docker-kubeconfig)
        trap "rm ${cfgname}" EXIT

        docker run --rm -it \
                -v "${HOME}/.ssh:/builder/home/.ssh:ro" \
                -v "$(which docker):/usr/bin/docker" \
                -v "/var/run/docker.sock:/var/run/docker.sock" \
                -v "${HOME}/.config/gcloud:/builder/home/.config/gcloud" \
                -v "${cfgname}:/builder/home/.kube/config" \
                -v "${docker_root_mount_path}/:${docker_root_mount_path}/" \
                -v "${HOME}/.vault-token:/builder/home/.vault-token" \
                -v "$HOME/.docker-data/helm/config:/builder/home/.config/helm" \
                -v "$HOME/.docker-data/helm/cache/repository:/builder/home/.cache/helm/repository" \
                -w $(pwd) \
                -e VAULT_ADDR=${VAULT_ADDR} \
                -e VAULT_TOKEN=${VAULT_TOKEN} \
                -e TF_INIT=no \
                -e TF_LOG="${TF_LOG}" \
                -e HOME=/builder/home \
                --user ${UID} \
                ${docker_base_repo_url}/terraform-helm "$@"
}
compdef dterraform=terraform

#--- helpers ----------------------------------------------
function refresh-docker-kubeconfig() {
        local gcloud_bin=${1:-/builder/google-cloud-sdk/bin/gcloud}
        local kubecfg=${HOME}/.kube/config

        if [[ ${KUBECONFIG} != "" ]]; then
                kubecfg=$KUBECONFIG
        fi

        local cfgname=$(mktemp /tmp/kubeconfig.XXXXXX)

        if [[ $(uname -s) == "Darwin" ]]; then
                sed -e "s|/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/gcloud|${gcloud_bin}|g" ${kubecfg} >${cfgname}
        else
                cp ${kubecfg} ${cfgname}
        fi

        # for kind cluster we map docker ip in kubeconfig instead of localhost
        local ctx=$(kubectl config current-context)
        if [[ ${ctx} == "kind-kind" ]]; then
                local docker_ip_addr=$(docker inspect --format "{{ json .NetworkSettings.Networks }}" kind-control-plane | jq '.[] | .IPAddress' -Mr)

                local cluster=$(kubectl config view -o json | jq ".contexts[] | select(.name == \"$(kubectl config current-context)\") | .context.cluster" -Mr)
                if [[ ${cluster} != "" ]]; then
                        local server_ip_addr=$(kubectl config view -o json | jq ".clusters[] | select(.name == \"${cluster}\") | .cluster.server" -Mr)
                        server=$(echo ${server} | sed -re 's|^https://([0-9.:]+)$|\1|')
                fi

                sed -ie "s|${server_ip_addr}|https://${docker_ip_addr}:6443|g" ${cfgname}
        fi

        echo ${cfgname}
}

function kube-get-api-server-hostport() {
        cluster=$(kubectl config view -o json | jq ".contexts[] | select(.name == \"$(kubectl config current-context)\") | .context.cluster" -Mr)
        if [[ ${cluster} != "" ]]; then
                server=$(kubectl config view -o json | jq ".clusters[] | select(.name == \"${cluster}\") | .cluster.server" -Mr)
        fi

        echo ${server} | sed -re 's|^https://([0-9.:]+)$|\1|'
}

#--- completion ----------------------------------------------
_dgcloud_complete() {
        shift

        COMP_LINE="${COMP_LINE/dgcloud/gcloud}"

        _python_argcomplete "gcloud" "$@"
}
_dgsutil_complete() {
        shift

        COMP_LINE="${COMP_LINE/dgsutil/gsutil}"

        _python_argcomplete "gsutil" "$@"
}
