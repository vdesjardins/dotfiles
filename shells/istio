#!/bin/zsh

alias ei="$EDITOR ~/dotfiles/shells/istio; source ~/dotfiles/shells/istio"

alias i="istioctl"
alias ida="istioctl dashboard"

alias kcli="kubectl logs -c istio-proxy"

function istio-objects() {
        k8s-get-crd-objects istio
}

function istio-bootstrap() {
        istioctl proxy-config bootstrap $@
}
function istio-bootstrap-json() {
        istioctl proxy-config bootstrap $@ -ojson | jq
}
alias ib=istio-bootstrap
alias ibj=istio-bootstrap-json

function istio-endpoints() {
        istioctl proxy-config endpoints $@
}
function istio-endpoints-json() {
        istioctl proxy-config endpoints $@ -ojson | jq
}
alias ie=istio-endpoints
alias iej=istio-endpoints-json

function istio-clusters() {
        istioctl proxy-config clusters $@
}
function istio-clusters-json() {
        istioctl proxy-config clusters $@ -ojson | jq
}
alias ic=istio-clusters
alias icj=istio-clusters-json

function istio-routes() {
        istioctl proxy-config routes $@
}
function istio-routes-json() {
        istioctl proxy-config routes $@ -ojson | jq
}
alias ir=istio-routes
alias irj=istio-routes-json

function istio-listeners() {
        istioctl proxy-config listeners $@
}
function istio-listeners-json() {
        istioctl proxy-config listeners "$@" -ojson | jq
}
alias il=istio-listeners
alias ilj=istio-listeners-json

function istio-secrets() {
        istioctl proxy-config secret $@
}
function istio-secrets-json() {
        istioctl proxy-config secret "$@" -ojson | jq
}
alias iss=istio-secrets
alias issj=istio-secrets-json

function istio-status() {
        istioctl proxy-status $@
}
alias is=istio-status

function envoy-call() {
        local ns=""
        local pod=""
        local url_path=""
        local method="GET"

        for p in "$@"; do
                case ${p} in
                -n=* | --namespace=*)
                        ns="${p#*=}"
                        ;;
                -p=* | --pod=*)
                        pod="${p#*=}"
                        ;;
                -u=* | --url=*)
                        url_path=${p#*=}
                        ;;
                -m=* | --method=*)
                        method=${p#*=}
                        ;;
                esac
        done

        if [[ ${pod} == "" ]]; then
                echo >&2 "parameter pod (-p) is mandatory"
                return 1
        fi

        if [[ ${ns} != "" ]]; then
                ns="-n=${ns}"
        fi

        kubectl port-forward ${pod} ${ns} 15000:15000 1>&2 &
        local kc_pid=$!
        sleep 2
        curl -X${method} http://localhost:15000/${url_path}
        kill ${kc_pid}
}

function pilot-adsz() {
        pilot-dump debug/adsz
}
function pilot-edsz() {
        pilot-dump debug/edsz
}
function pilot-edsz-push() {
        pilot-dump debug/edsz '?push=1'
}
function pilot-cdsz() {
        pilot-dump debug/cdsz
}
function pilot-registryz() {
        pilot-dump debug/registryz
}
function pilot-endpointz() {
        pilot-dump debug/endpointz
}
function pilot-configz() {
        pilot-dump debug/configz
}
function pilot-syncz() {
        pilot-dump debug/syncz
}

function pilot-dump-config() {
        pilot-dump "debug/config_dump?proxyID=$1"
}

function pilot-dump() {
        local url_path=$1
        local cmd=$2

        kubectl port-forward service/istio-pilot -n istio-system 15014:15014 1>&2 &
        local kc_pid=$!
        sleep 2
        curl -s http://localhost:15014/${url_path}${cmd}
        kill ${kc_pid}
}

function envoy-dump-config() {
        envoy-call --url=config_dump $@
}

function envoy-stats() {
        envoy-call --url=stats $@
}

function envoy-help() {
        envoy-call --url=help $@
}

function envoy-log-trace() {
        local subsystem=level

        envoy-call --url="logging?${subsystem}=trace" --method=POST $@
}

function envoy-log-debug() {
        local subsystem=level

        envoy-call --url="logging?${subsystem}=debug" --method=POST $@
}

function envoy-log-info() {
        local subsystem=level

        envoy-call --url="logging?${subsystem}=info" --method=POST $@
}

function istio-auth() {
        istioctl authn tls-check "$@"
}

function istio-desc() {
        istioctl x describe "$@"
}

alias idp="istio-desc pod"
alias ids="istio-desc service"

function istio-analyze() {
        istioctl analyze "$@"
}

function istio-proxy-listener-servernames() {
        pod=$1
        listener=${2:-0.0.0.0_443}
        pilot-dump-config $pod | jq ".configs[] | select(.dynamicActiveListeners!=null) | .dynamicActiveListeners[] | select(.listener.name==\"${listener}\") | .listener.filterChains[] | select(.filterChainMatch.serverNames!=null) | .filterChainMatch.serverNames[]" -Mr
}

function istio-proxy-listener-chainmatches() {
        pod=$1
        listener=${2:-0.0.0.0_443}
        pilot-dump-config $pod | jq ".configs[] | select(.dynamicActiveListeners!=null) | .dynamicActiveListeners[] | select(.listener.name==\"${listener}\") | .listener.filterChains[] | select(.filterChainMatch!=null) | .filterChainMatch" -Mr
}

function envoy-proxy-listener-servernames() {
        pod=$1
        listener=${2:-0.0.0.0_443}
        envoy-dump-config -p=$pod | jq ".configs[] | select(.dynamicActiveListeners!=null) | .dynamicActiveListeners[] | select(.listener.name==\"${listener}\") | .listener.filterChains[] | select(.filterChainMatch.serverNames!=null) | .filterChainMatch.serverNames[]" -Mr
}

function istio-filter-gateways() {
        local label=$1
        kubectl get gateways -A -o json | jq ".items[] | select(.spec.selector.istio == \"${label}\") | (.metadata.namespace + \"\t\" + .metadata.name)" -Mr
}
# vim: ft=sh
