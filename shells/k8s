#!/bin/zsh

alias eak="$EDITOR ~/dotfiles/shells/k8s; source ~/dotfiles/shells/k8s"

alias kc="dkubectl"
alias kcg="kc get"
alias kcgp="kc get pods --show-labels"
alias kcgs="kc get services"
alias kcgd="kc get deployments"
alias kcgst="kc get statefulsets"
alias kcgc="kc get configmaps"
alias kcgss="kc get secrets"
alias kcgn="kc get namespaces --show-labels"
alias kcgno="kc get nodes"
alias kcgj="kc get jobs,cronjobs"
alias kcge="kc get events"
alias kcgi="kc get ingress"
alias kcgct="kc get certificates"
alias kcgvw="kc get validatingwebhookconfiguration"
alias kcgmw="kc get mutatingwebhookconfiguration"
alias kcgvs="kc get virtualservice"
alias kcgg="kc get gateway"
alias kcgdr="kc get destinationrule"
alias kcgse="kc get serviceentry"
alias kcgcr="kc get clusterrole"
alias kcgr="kc get role"
alias kcgcrb="kc get clusterrolebinding"
alias kcgrb="kc get rolebinding"
alias kcgrbac="kc get rolebindings,clusterrolebindings"

alias kcgci="kc get clusterissuer"
alias kcgce="kc get certificate"
alias kcgcer="kc get certificaterequest"
alias kcgch="kc get challenge"
alias kcgo="kc get order"
alias kcdci="kc describe clusterissuer"
alias kcdce="kc describe certificate"
alias kcdcer="kc describe certificaterequest"
alias kcdch="kc describe challenge"
alias kcdo="kc describe order"

alias kcdel="kc delete"
alias kcr="kc delete"
alias kcrp="kcr pod"
alias kcrs="kcr services"
alias kcrd="kcr deployments"
alias kcrst="kcr statefulsets"
alias kcrc="kcr configmaps"
alias kcrss="kcr secrets"
alias kcri="kcr ingress"
alias kcrct="kcr certificates"
alias kcrvw="kcr validatingwebhookconfiguration"
alias kcrmw="kcr mutatingwebhookconfiguration"
alias kcrvs="kcr virtualservice"
alias kcrg="kcr gateway"
alias kcrdr="kcr destinationrule"
alias kcrse="kcr serviceentry"

alias kcd="kc describe"
alias kcdp="kc describe pods"
alias kcds="kcd services"
alias kcdd="kcd deployments"
alias kcdst="kcd statefulsets"
alias kcdno="kcd nodes"
alias kcdc="kcd configmaps"
alias kcdss="kcd secrets"
alias kcdi="kcd ingress"
alias kcdct="kcd certificates"
alias kcdvs="kcd virtualservice"
alias kcdg="kcd gateway"
alias kcddr="kcd destinationrule"
alias kcdse="kcd serviceentry"

alias kce="kc exec -it"
alias kcl="kc logs"
alias kca="kc apply -f"
alias kcm="kc edit"
alias kcpf="kc port-forward"
alias mk=minikube

alias kcmc="kcm configmap"
alias kcmd="kcm deploy"
alias kcmst="kcm statefulset"
alias kcms="kcm service"
alias kcmi="kcm ing"
alias kcmp="kcm pod"
alias kcmss="kcm secret"
alias kcmn="kcm ns"
alias kcmvs="kcm virtualservice"
alias kcmg="kcm gateway"
alias kcmdr="kcm destinationrule"
alias kcmse="kcm serviceentry"

alias kctp="kc top pods"
alias kctc="kc top pods --containers=true"
alias kctn="kc top nodes"

alias k8s-get-certs="kubectl get certificates --all-namespaces -o jsonpath='{range .items[?(@.spec.commonName!=\"\")]}{.spec.commonName}{\"\t\"}{.status.notAfter}{\"\n\"}' | sort"

function kcani() {
        ns=$1
        sa=$2
        kubectl auth can-i list pods --as=system:serviceaccount:${ns}:${sa}
}

function kinspect() {
        local ns=${1}
        local nsarg=""

        if [[ ${ns} != "" ]]; then
                nsarg="--namespace=${ns}"
        fi

        dkubectl run --rm -i -t vince-d --image=gcr.io/google-containers/toolbox --restart=Never --labels 'sidecar.istio.io/inject=false' ${nsarg} --command /bin/bash
}

function kgcloud() {
        local ns=${1}
        local nsarg=""

        if [[ ${ns} != "" ]]; then
                nsarg="--namespace=${ns}"
        fi

        kubectl run --rm -i -t vince-d-gcloud --image=google/cloud-sdk --restart=Never --labels 'sidecar.istio.io/inject=false' ${nsarg} --command /bin/bash
}

alias kcccc="kubectl config current-context"
alias kccuc="kubectl config use-context"
alias kccgc="kubectl config get-contexts"
function k8s-current-namespace() {
        kubectl config get-contexts | grep '^*' | awk '{print $5;}'
}
alias kcgcn=k8s-current-namespace

alias pod-restart="kubectl get pods --all-namespaces --sort-by='.status.containerStatuses[0].restartCount'"

function deployment-evict() {
        kubectl patch deployment $1 -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"$(date +'%s')\"}}}}}"
}

function kcgpp() {
        kubectl get pods -n ${1} -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.name}{":\t"}{.ports[*].name}{":"}{.ports[*].containerPort}{""}{"\t"}{end}{end}' | sort | column -t -c $(tput cols)
}

function pod-info() {
        local ns=${1}

        if [[ ${ns} == "" ]]; then
                ns=$(k8s-current-namespace)
        fi

        kubectl get po -n ${ns} -o json | jq -r '.items[] | [(.metadata.name),([.spec.containers[].name] | join(",")),(.spec.nodeSelector["cloud.google.com/gke-nodepool"])] | @tsv'
}

function pod-policy() {
        kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{. as $parent}{"\n"}{.metadata.namespace}{"/"}{.metadata.name}{"\t"}{range .spec.containers[*]}{. as $container}{.name}{"\t"}{.imagePullPolicy}{"\t"}{range $parent.status.containerStatuses[*]}{select(.name == $container.name).restartCount}{end}{"\t"}{end}{end}' | sort | column -t -c $(tput cols)
}

function pod-problems() {
        kcgp --all-namespaces | grep -v -P '(Running|Completed)'
}

function cluster-switch() {
        local cluster=${1}

        if [[ ${cluster} == "" ]]; then
                cluster=$(set -o pipefail && kubectl config get-contexts | tail -n +2 | awk '{ print $2; }' | fzf-down)
        fi

        if [[ ${cluster} == "" ]]; then
                echo "no cluster provided."
                return 1
        fi

        local session_name=shell-${cluster}

        if tmux list-session | cut -d':' -f1 | grep ${session_name}; then
                tmux switch-client -t ${session_name}
                return
        fi

        local dir=~/.config/my-kubeconfig/
        mkdir -p ${dir}
        local kubeconfig=${dir}/${cluster}-config
        local startup_script=${dir}/startup-script.sh
        cp ~/.kube/config ${kubeconfig}

        cat <<-EOT >${startup_script}
export KUBECONFIG=${kubeconfig}
kubectl config use-context ${cluster}
zsh
EOT
        chmod +x ${startup_script}

        tmux new-session -d -s ${session_name} ${startup_script}
        tmux setenv -t ${session_name} KUBECONFIG ${kubeconfig}
        tmux switch-client -t ${session_name}
}
alias csw=cluster-switch

function cluster-switch-local() {
        local cluster=${1}

        if [[ ${cluster} == "" ]]; then
                cluster=$(set -o pipefail && kubectl config get-contexts | tail -n +2 | awk '{ print $2; }' | fzf-down)
        fi

        if [[ ${cluster} == "" ]]; then
                echo "no cluster provided."
                return 1
        fi

        kubectl config use-context ${cluster}
}
alias cswl=cluster-switch-local

function namespace-switch() {
        local ns=${1}
        if [[ ${ns} == "" ]]; then
                ns=$(set -o pipefail && kubectl get namespaces | tail -n +2 | awk '{ print $1; }' | fzf-down)
        fi

        if [[ ${ns} == "" ]]; then
                echo "no namespace provided."
                return 1
        fi

        local COLOR='\033[0;34m'
        local NC='\033[0m'
        echo "Switching Default Namespace to ${COLOR}${ns}${NC}"
        kubectl config set-context $(kubectl config current-context) --namespace="$ns"
}
alias ksw=namespace-switch
alias kswi="namespace-switch istio-system"
alias kswk="namespace-switch kube-system"

function k8s-internal-ips() {
        kubectl get node -o json | jq '.items[] | "\(.metadata.name) \(.status.addresses | map(select(.type | contains("InternalIP"))) | .[].address)"' -Mr
}

function k8s-connect-to-nodes() {
        local cluster_name=$(kubectl config current-context)

        local user=${1}

        local first=1

        for i in $(kubectl get node -o json | jq '.items[].status.addresses | map(select(.type | contains("InternalIP"))) | .[].address' -Mr); do

                echo "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${user}@${i}"

                if [[ ${first} == 1 ]]; then
                        cmd="tmux new-session -d -n k8s-hosts -s ssh-${cluster_name} zsh -ic \"ssh -vvvvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${i};zsh -i\"\; switch-client -t ssh-${cluster_name}"
                        first=0
                else
                        cmd="${cmd}\; split-window zsh -ic \"ssh -vvvvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${i};zsh -i\""
                fi
        done

        echo ${cmd}
        cmd="${cmd}\; select-layout tiled"

        eval ${cmd}
}

function helm() {
        dhelm $@
}

function hl() {
        helm list $@
}

function hm() {
        helm "$@"
}

function getcrb() {
        local ns=$1
        local sa=$2

        if [[ "$ns" == "" || "$sa" == "" ]]; then
                echo "param√®tres requis: namespace, serviceaccount"
                return 1
        fi

        kubectl get clusterrolebindings -o json | jq -r $(
                cat <<-EOT
      .items[] |
      select(
        .subjects // [] | .[] |
        [.kind,.namespace,.name] == ["ServiceAccount\","${ns}","${sa}"]
      ) |
      .metadata.name
EOT
        )
}

function kcgrl() {
        local arg=$1
        kubectl get pod -o json ${arg} | jq '.items[] | {pod: .metadata.name, namespace: .metadata.namespace, nodeName: .spec.nodeName, memory: [(.spec.containers[] | {container: .name, requests: .resources.requests.memory, limits: .resources.limits.memory} )], cpu: [(.spec.containers[] | {container: .name, requests: .resources.requests.cpu, limit: .resources.limits.cpu} )] }'
}

function k8s-search-with-role() {
        local role=$1
        echo "clusterrolebinding: "
        kubectl get clusterrolebinding -o json | jq '[ .items[] | select(.roleRef.name | contains("${role}"))] | .[] | .metadata.name'
        echo "rolebinding: "
        kubectl get rolebinding -o json | jq '[ .items[] | select(.roleRef.name | contains("${role}"))] | .[] | .metadata.name'
}

function k8s-master-addr() {
        local cluster=$1
        if [[ ${cluster} == "" ]]; then
                kubectl config view -o json | jq '.clusters[] | { name: .name, addr: .cluster.server} .addr' -Mr
        else
                kubectl config view -o json | jq '.clusters[] | { name: .name, addr: .cluster.server} | select(.name == "gke_corp-prod-gkeinfra_northamerica-northeast1-a_prod01") | .addr' -Mr
        fi
}

function k8s-dump-ca() {
        kubectl config view --raw -o json | jq -r '.clusters[0].cluster."certificate-authority-data"' | tr -d '"' | base64 --decode
}

# k8s search for resources
function k8s-resource-picker() {
        local name=$1
        kubectl get ${name} --no-headers=true | awk '{ print $1; }' | fzf-down --tac
}

function k8s-resource-picker-n() {
        k8s-resource-picker namespaces
}

function k8s-resource-picker-p() {
        k8s-resource-picker pods
}

function k8s-resource-picker-c() {
        k8s-resource-picker configmaps
}

function k8s-resource-picker-s() {
        k8s-resource-picker services
}

function k8s-resource-picker-d() {
        k8s-resource-picker deploy
}

function bind-k8s-helper() {
        local c
        for c in $@; do
                eval "fzf-k$c-widget() { local result=\$(k8s-resource-picker-$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
                eval "zle -N fzf-k$c-widget"
                eval "bindkey '^[k^[$c' fzf-k$c-widget"
        done
}

bind-k8s-helper d n p c s
unset -f bind-k8s-helper

function k8s-get-images() {
        kubectl get pods "$@" -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' $@ | sort
}

function k8s-get-crd-objects() {
        local filter=${1:?error missing filter}
        local ns=""

        if [[ ${2} == "all" ]]; then
                ns="--all-namespaces"
        fi

        local crds=()
        for crd in $(kubectl get customresourcedefinition -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep ${filter}); do
                crds+=("${crd}")
        done
        crds=$(
                IFS=,
                echo "${crds[*]}"
        )
        content=$(kubectl get ${crds} ${ns} --no-headers=true)
        echo ${content} | column -t
}

function k8s-get-ns-objects() {
        kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found
}

function k8s-copy-ns() {
        local src=${1:?error source namespace not specified}
        local dst=${2:?error destination namespace not specified}

        for res in $(kc api-resources --namespaced=true | cut -f1 -d' '); do
                case ${res} in
                endpoints) ;;
                pods) ;;
                replicasets) ;;
                certificates)
                        kubectl get ${res} -o json --namespace=${src} |
                                jq ".items[].metadata.namespace = \"${dst}\"" 2>/dev/null >to-create-certificates.json
                        echo "WARNING: File to process manually: to-create-certificates.json"
                        ;;

                ingresses)
                        kubectl get ${res} -o json --namespace=${src} |
                                jq ".items[].metadata.namespace = \"${dst}\"" 2>/dev/null >to-create-ingresses.json
                        echo "WARNING: File to process manually: to-create-ingresses.json"
                        ;;
                *)
                        kubectl get ${res} -o json --namespace=${src} | jq ".items[].metadata.namespace = \"${dst}\"" 2>/dev/null | kubectl create -f - 2>/dev/null
                        ;;
                esac
        done
        return 0
}

function k8s-search-configmap() {
        local exp=$1
        kubectl get configmap -o json | jq '.items[].data[]' -Sr | grep -P "${exp}"
}

alias kcsc=k8s-search-configmap

function k8s-dump-secret() {
        local secret=$1
        kubectl get secret ${secret} -o json | jq '.data[]' -Sr
}

function k8s-dump-cert() {
        local secret=$1
        local key=${2:-tls.crt}

        kubectl get secret ${secret} -o json | jq ".data[\"${key}\"]" -Sr | base64 -D | openssl x509 -text -noout
}
